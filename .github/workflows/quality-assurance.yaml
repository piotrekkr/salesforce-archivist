name: Quality Assurance

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: quality-assurance-${{ github.ref }}
  cancel-in-progress: true

jobs:
  image-build:
    name: Check Image Build
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    env:
      CI_IMAGE_TAG: ghcr.io/${{ github.repository }}:ci-run-${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          show-progress: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get UID/GID of GitHub Action user
        shell: bash
        id: user-id
        run: |
          echo "gha_uid=$(id -u)" >> $GITHUB_OUTPUT
          echo "gha_gid=$(id -g)" >> $GITHUB_OUTPUT

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            ARCHIVIST_UID=${{ steps.user-id.outputs.gha_uid }}
            ARCHIVIST_GID=${{ steps.user-id.outputs.gha_gid }}
          file: Dockerfile
          push: false
          tags: ${{ env.CI_IMAGE_TAG }}
          cache-from: type=gha,scope=archivist
          cache-to: type=gha,mode=max,scope=archivist
          load: false

  code-quality:
    name: Check Code Quality
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          show-progress: false

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dev and test dependencies
        run: uv sync

      - name: Check code formatting
        run: uv run poe format-check

      - name: Check linting
        run: uv run poe lint-check

      - name: Run static analysis
        run: uv run poe mypy

      - name: Run tests
        run: uv run poe test
